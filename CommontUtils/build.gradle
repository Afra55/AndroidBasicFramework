apply plugin: 'com.android.library'

android {
    def app = rootProject.ext.android
    compileSdkVersion app.compileSdkVersion
    buildToolsVersion app.buildToolsVersion

    defaultConfig {
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode app.versionCode
        versionName app.versionName

        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "BAIDU_APP_ID", "\"$rootProject.ext.code.baidu_app_id\"")
        buildConfigField("String", "BAIDU_APP_SECRET", "\"$rootProject.ext.code.baidu_app_secret\"")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        // Exclude files to avoid packaging collisions (same file name in multiple dependencies).
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
    }

    // Test Android jar comes with unimplemented methods that throw exceptions by default. This
    // option forces the methods to return default values instead. Required for static methods,
    // such as TextUtils, as those cannot be mocked with Mockito.
    // Refer http://tools.android.com/tech-docs/unit-testing-support#TOC-Method-...-not-mocked.-
    testOptions {
        unitTests.returnDefaultValues = true
    }

    aaptOptions {
        cruncherEnabled false
    }
}

dependencies {

    def version = rootProject.ext.dependencies

    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile "junit:junit:$version.junit_version"
    compile "com.android.support:appcompat-v7:$version.android_support_lib_version"
    compile "com.android.support:support-v4:$version.android_support_lib_version"
    compile "com.android.support:design:$version.android_support_lib_version"
    compile "com.android.support:multidex:$version.android_support_multidex_version"
    compile 'com.google.zxing:core:3.2.1'
    compile "com.google.code.gson:gson:$version.gson_version"
    compile 'com.facebook.fresco:fresco:0.10.0'
    compile "com.squareup.retrofit2:retrofit:$version.retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:$version.retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$version.retrofit_version"
    compile "io.reactivex.rxjava2:rxjava:$version.rxjava_version"
    compile "io.reactivex.rxjava2:rxandroid:$version.rxandroid_version"
    compile "com.android.support.constraint:constraint-layout:$version.constraint_version"

    compile "com.squareup.okhttp3:logging-interceptor:$version.okhttp3_logging_interceptor_version"

    compile "com.facebook.stetho:stetho-okhttp3:$version.stetho_version"

    compile ("com.squareup.retrofit2:converter-simplexml:$version.retrofit_version"){
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
        exclude group: 'xpp3', module: 'xpp3'
    }

    compile "com.alibaba:fastjson:$version.fast_json_version"

    annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:$version.dbflow_version"

    compile "com.github.Raizlabs.DBFlow:dbflow-core:$version.dbflow_version"
    compile "com.github.Raizlabs.DBFlow:dbflow:$version.dbflow_version"

    // sql-cipher database encryption (optional)
    compile "com.github.Raizlabs.DBFlow:dbflow-sqlcipher:$version.dbflow_version"

    compile "com.jakewharton:butterknife:$version.butterknife"
    annotationProcessor "com.jakewharton:butterknife-compiler:$version.butterknife"

    compile "org.greenrobot:eventbus:$version.eventbus"

}
